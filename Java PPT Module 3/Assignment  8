Q1.What is ORM in Hibernate?
Ans.- 
ORM(Object-Relational Mapping). It is a technique used to map object oriented models to databases,it helps in interecting with the database using objects and their relationship instead of writing SQL queries directly.
Hibernate is an ORM framework for the Java programming language.Hibernate handles the mapping between objects and the database transparently, allowing developers to perform Create, Read, Update, Delete operations on objects without writing SQL queries explicitly
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q2.What are the advantages of Hibernate over JDBC?
Ans.-
Hibernate provides an ORM layer that maps Java objects to database tables, eliminating the need to write complex SQL queries manually. This allows to work with objects and their relationships
* Hibernate reduces the amount of boilerplate code required for database operations. It automatically generates the SQL statements needed to perform Create, Read, Update, Delete operations, eliminating the need to write and maintain SQL queries.
* Hibernate makes it  posible to switch between different databases without changing the application code. Hibernate provides a common API that can work with various databases, such as MySQL, Oracle, PostgreSQL, etc
* Hibernate can be easily integrated into existing applications without requiring major code changes. It can work alongside JDBC
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q3.What are some of the important interfaces of Hibernate framework?
Ans.-
The core interfaces of Hibernate framework are:
Configuration.
SessionFactory.
Session.
Query.
Criteria.
Transaction.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q4.What is a Session in Hibernate?
Ans.-
A Session represents a single unit of work with the database in Hibernate. It is the main interface for performing database operations and acts as a gateway to interact with the underlying database using Hibernate. Objects are managed and database operations are carried out in Session It provides methods to perform Create, Read, Update, Delete operations, execute queries, and manage transactions.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q5.What is a SessionFactory?
Ans.-
A SessionFactory is a factory class responsible for creating and managing Session objects. It acts as a single point of configuration and initialization for the framework.
The SessionFactory is created once during the application's startup and allow multiple threads to access it concurrently. It represents a shared, immutable cache of compiled mappings for entity classes and other configuration settings.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q6.What is HQL?
Ans.-
HQL (Hibernate Query Language) is a powerful query language provided by Hibernate for performing database queries. It is a SQL-like language that is specifically designed for querying and manipulating data in Hibernate-managed databases.
HQL is an object-oriented query language that operates on persistent objects and their relationships, rather than directly on database tables and columns. It allows developers to write queries using entity class names, property names, and associations, making the code more intuitive and closely aligned with the object-oriented paradigm.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q7.What are Many to Many associations?
Ans.-
Many-to-many associations, also known as M:N associations, represent a relationship between entities where multiple instances of one entity can be associated with multiple instances of another entity. In other words, it is a type of relationship where one entity can be connected to multiple instances of another entity, and vice versa.
To implement a many-to-many association, you typically use an intermediary table, often referred to as a "join table" or an "association table." This table contains foreign key references to both entities involved in the association.
Many-to-many associations are commonly used in database modeling to represent complex relationships between entities. They allow for the flexibility of associating multiple instances of one entity with multiple instances of another entity.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q8.What is hibernate caching?
Ans.-
Hibernate caching refers to the mechanism provided by the Hibernate framework to improve the performance of database operations by reducing the number of queries sent to the database. It involves storing frequently accessed data in memory so that subsequent requests for the same data can be served quickly without hitting the database.
Caching in Hibernate helps to reduce the overhead of repeated database access and improves the response time of an application.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q9.What is the difference between first level cache and second level cache?
Ans.-
some of the differences are:-
* The first level cache is session specified and stores individual object,while the second-level cache is shared among sessions and caches a wider range of data such as entities, query results, and other objects.
* The first-level cache is managed automatically by Hibernate, while the second-level cache requires explicit configuration. 
* The first-level cache has a smaller scope and shorter lifespan, while the second-level cache has a global scope and persists across sessions.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q10.What can you tell about Hibernate Configuration File? in one paragraph in 200 words
Ans.-
The Hibernate Configuration File is a crucial component in Hibernate-based applications. It serves as a central configuration file that contains essential settings and mappings required for Hibernate to establish a connection with a database and perform ORM operations. Typically written in XML or properties format, the configuration file includes details such as the database connection parameters URL, username, password, driver class.
The Hibernate dialect for the target database, and mappings between Java domain objects (entities) and database tables. Additionally, the configuration file allows for customization of caching mechanisms, transaction management, and other Hibernate-specific properties. By providing a standardized and easily modifiable configuration, the Hibernate Configuration File enables to fine-tune the behavior of Hibernate to align with the application's specific requirements and the underlying database.
During the initialization of the Hibernate SessionFactory, the configuration file is loaded, allowing for the creation of Hibernate sessions to interact with the database. 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
